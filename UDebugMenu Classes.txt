class UDebugBlueLookAndFeel extends UWindowLookAndFeel;



#exec TEXTURE IMPORT NAME=BlueActiveFrame FILE=Textures\b_ActiveFrame.tga GROUP="Icons"         MIPS=OFF COMPRESS=DXT5
#exec TEXTURE IMPORT NAME=BlueInactiveFrame FILE=Textures\b_InactiveFrame.tga GROUP="Icons"     MIPS=OFF COMPRESS=DXT5
#exec TEXTURE IMPORT NAME=BlueActiveFrameS FILE=Textures\b_ActiveFrameS.tga GROUP="Icons"       MIPS=OFF COMPRESS=DXT5
#exec TEXTURE IMPORT NAME=BlueInactiveFrameS FILE=Textures\b_InactiveFrameS.tga GROUP="Icons"   MIPS=OFF COMPRESS=DXT5
#exec TEXTURE IMPORT NAME=BlueButton FILE=Textures\b_SmallButton.tga GROUP="Icons"              MIPS=OFF COMPRESS=DXT5
#exec TEXTURE IMPORT NAME=BlueMisc FILE=Textures\b_Misc.tga GROUP="Icons"               MIPS=OFF COMPRESS=DXT1
#exec TEXTURE IMPORT NAME=BlueMenuHM FILE=Textures\b_MenuHM.tga GROUP="Icons"           MIPS=OFF COMPRESS=DXT1

#exec TEXTURE IMPORT NAME=BlueMenuArea FILE=Textures\b_MenuArea.tga GROUP="Icons"       MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueClientArea FILE=Textures\b_ClientArea.tga GROUP="Icons"   MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuTL FILE=Textures\b_MenuTL.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuT FILE=Textures\b_MenuT.tga GROUP="Icons"             MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuTR FILE=Textures\b_MenuTR.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuL FILE=Textures\b_MenuL.tga GROUP="Icons"             MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuR FILE=Textures\b_MenuR.tga GROUP="Icons"             MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuBL FILE=Textures\b_MenuBL.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuB FILE=Textures\b_MenuB.tga GROUP="Icons"             MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuBR FILE=Textures\b_MenuBR.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuHL FILE=Textures\b_MenuHL.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuHR FILE=Textures\b_MenuHR.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueMenuLine FILE=Textures\b_MenuLine.tga GROUP="Icons"       MIPS=OFF

#exec TEXTURE IMPORT NAME=BlueBarL FILE=Textures\b_BarL.tga GROUP="Icons"               MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarTile FILE=Textures\b_BarTile.tga GROUP="Icons"         MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarMax FILE=Textures\b_BarMax.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarWin FILE=Textures\b_BarWin.tga GROUP="Icons"           MIPS=OFF

#exec TEXTURE IMPORT NAME=BlueBarInL FILE=Textures\b_BarInL.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarInR FILE=Textures\b_BarInR.tga GROUP="Icons"           MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarInM FILE=Textures\b_BarInM.tga GROUP="Icons"           MIPS=OFF

#exec TEXTURE IMPORT NAME=BlueBarOutL FILE=Textures\b_BarOutL.tga GROUP="Icons"         MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarOutR FILE=Textures\b_BarOutR.tga GROUP="Icons"         MIPS=OFF
#exec TEXTURE IMPORT NAME=BlueBarOutM FILE=Textures\b_BarOutM.tga GROUP="Icons"         MIPS=OFF

var() Region	SBUpUp;
var() Region	SBUpDown;
var() Region	SBUpDisabled;

var() Region	SBDownUp;
var() Region	SBDownDown;
var() Region	SBDownDisabled;

var() Region	SBLeftUp;
var() Region	SBLeftDown;
var() Region	SBLeftDisabled;

var() Region	SBRightUp;
var() Region	SBRightDown;
var() Region	SBRightDisabled;

var() Region	SBBackground;

var() Region	FrameSBL;
var() Region	FrameSB;
var() Region	FrameSBR;

var() Region	CloseBoxUp;
var() Region	CloseBoxDown;
var() int		CloseBoxOffsetX;
var() int		CloseBoxOffsetY;


const SIZEBORDER = 3;
const BRSIZEBORDER = 15;

/* Framed Window Drawing Functions */
function FW_DrawWindowFrame(UWindowFramedWindow W, Canvas C)
{
	local Texture T;
	local Region R, Temp;

	C.SetDrawColor(255,255,255);

	T = W.GetLookAndFeelTexture();

	R = FrameTL;
	W.DrawStretchedTextureSegment( C, 0, 0, R.W, R.H, R.X, R.Y, R.W, R.H, T );

	R = FrameT;
	W.DrawStretchedTextureSegment( C, FrameTL.W, 0,
									W.WinWidth - FrameTL.W
									- FrameTR.W,
									R.H, R.X, R.Y, R.W, R.H, T );

	R = FrameTR;
	W.DrawStretchedTextureSegment( C, W.WinWidth - R.W, 0, R.W, R.H, R.X, R.Y, R.W, R.H, T );


	if(W.bStatusBar)
		Temp = FrameSBL;
	else
		Temp = FrameBL;


	R = FrameL;
	W.DrawStretchedTextureSegment( C, 0, FrameTL.H,
									R.W,
									W.WinHeight - FrameTL.H
									- Temp.H,
									R.X, R.Y, R.W, R.H, T );

	R = FrameR;
	W.DrawStretchedTextureSegment( C, W.WinWidth - R.W, FrameTL.H,
									R.W,
									W.WinHeight - FrameTL.H
									- Temp.H,
									R.X, R.Y, R.W, R.H, T );

	if(W.bStatusBar)
		R = FrameSBL;
	else
		R = FrameBL;
	W.DrawStretchedTextureSegment( C, 0, W.WinHeight - R.H, R.W, R.H, R.X, R.Y, R.W, R.H, T );

	if(W.bStatusBar)
	{
		R = FrameSB;
		W.DrawStretchedTextureSegment( C, FrameBL.W, W.WinHeight - R.H,
										W.WinWidth - FrameSBL.W
										- FrameSBR.W,
										R.H, R.X, R.Y, R.W, R.H, T );
	}
	else
	{
		R = FrameB;
		W.DrawStretchedTextureSegment( C, FrameBL.W, W.WinHeight - R.H,
										W.WinWidth - FrameBL.W
										- FrameBR.W,
										R.H, R.X, R.Y, R.W, R.H, T );
	}

	if(W.bStatusBar)
		R = FrameSBR;
	else
		R = FrameBR;
	W.DrawStretchedTextureSegment( C, W.WinWidth - R.W, W.WinHeight - R.H, R.W, R.H, R.X, R.Y,
									R.W, R.H, T );


	if(W.ParentWindow.ActiveWindow == W)
	{
		C.DrawColor = FrameActiveTitleColor;
		C.Font = W.Root.Fonts[W.F_Bold];
	}
	else
	{
		C.DrawColor = FrameInactiveTitleColor;
		C.Font = W.Root.Fonts[W.F_Normal];
	}


	W.ClipTextWidth(C, FrameTitleX, FrameTitleY,
					W.WindowTitle, W.WinWidth - 22);

	if(W.bStatusBar)
	{
		C.Font = W.Root.Fonts[W.F_Normal];
		C.SetDrawColor(0,0,0);

		W.ClipTextWidth(C, 6, W.WinHeight - 13, W.StatusBarText, W.WinWidth - 22);

		C.SetDrawColor(255,255,255);
	}
}

function FW_SetupFrameButtons(UWindowFramedWindow W, Canvas C)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.CloseBox.WinLeft = W.WinWidth - CloseBoxOffsetX - CloseBoxUp.W;
	W.CloseBox.WinTop = CloseBoxOffsetY;

	W.CloseBox.SetSize(CloseBoxUp.W, CloseBoxUp.H);
	W.CloseBox.bUseRegion = True;

	W.CloseBox.UpTexture = T;
	W.CloseBox.DownTexture = T;
	W.CloseBox.OverTexture = T;
	W.CloseBox.DisabledTexture = T;

	W.CloseBox.UpRegion = CloseBoxUp;
	W.CloseBox.DownRegion = CloseBoxDown;
	W.CloseBox.OverRegion = CloseBoxUp;
	W.CloseBox.DisabledRegion = CloseBoxUp;
}

function Region FW_GetClientArea(UWindowFramedWindow W)
{
	local Region R;

	R.X = FrameL.W;
	R.Y	= FrameT.H;
	R.W = W.WinWidth - (FrameL.W + FrameR.W);
	if(W.bStatusBar)
		R.H = W.WinHeight - (FrameT.H + FrameSB.H);
	else
		R.H = W.WinHeight - (FrameT.H + FrameB.H);

	return R;
}


function FrameHitTest FW_HitTest(UWindowFramedWindow W, float X, float Y)
{
	if((X >= 3) && (X <= W.WinWidth-3) && (Y >= 3) && (Y <= 14))
		return HT_TitleBar;
	if((X < BRSIZEBORDER && Y < SIZEBORDER) || (X < SIZEBORDER && Y < BRSIZEBORDER))
		return HT_NW;
	if((X > W.WinWidth - SIZEBORDER && Y < BRSIZEBORDER) || (X > W.WinWidth - BRSIZEBORDER && Y < SIZEBORDER))
		return HT_NE;
	if((X < BRSIZEBORDER && Y > W.WinHeight - SIZEBORDER)|| (X < SIZEBORDER && Y > W.WinHeight - BRSIZEBORDER))
		return HT_SW;
	if((X > W.WinWidth - BRSIZEBORDER) && (Y > W.WinHeight - BRSIZEBORDER))
		return HT_SE;
	if(Y < SIZEBORDER)
		return HT_N;
	if(Y > W.WinHeight - SIZEBORDER)
		return HT_S;
	if(X < SIZEBORDER)
		return HT_W;
	if(X > W.WinWidth - SIZEBORDER)
		return HT_E;

	return HT_None;
}

/* Client Area Drawing Functions */
function DrawClientArea(UWindowClientWindow W, Canvas C)
{
	W.DrawClippedTexture(C, 0, 0, Texture'BlueMenuTL');
	W.DrawStretchedTexture(C, 2, 0, W.WinWidth-4, 2, Texture'BlueMenuT');
	W.DrawClippedTexture(C, W.WinWidth-2, 0, Texture'BlueMenuTR');

	W.DrawClippedTexture(C, 0, W.WinHeight-2, Texture'BlueMenuBL');
	W.DrawStretchedTexture(C, 2, W.WinHeight-2, W.WinWidth-4, 2, Texture'BlueMenuB');
	W.DrawClippedTexture(C, W.WinWidth-2, W.WinHeight-2, Texture'BlueMenuBR');

	W.DrawStretchedTexture(C, 0, 2, 2, W.WinHeight-4, Texture'BlueMenuL');
	W.DrawStretchedTexture(C, W.WinWidth-2, 2, 2, W.WinHeight-4, Texture'BlueMenuR');

	W.DrawStretchedTexture(C, 2, 2, W.WinWidth-4, W.WinHeight-4, Texture'BlueClientArea');
}


/* Combo Drawing Functions */

function Combo_SetupSizes(UWindowComboControl W, Canvas C)
{
	local float TW, TH;

	C.Font = W.Root.Fonts[W.Font];
	W.TextSize(C, W.Text, TW, TH);

	W.WinHeight = 12 + MiscBevelT[2].H + MiscBevelB[2].H;

	switch(W.Align)
	{
	case TA_Left:
		W.EditAreaDrawX = W.WinWidth - W.EditBoxWidth;
		W.TextX = 0;
		break;
	case TA_Right:
		W.EditAreaDrawX = 0;
		W.TextX = W.WinWidth - TW;
		break;
	case TA_Center:
		W.EditAreaDrawX = (W.WinWidth - W.EditBoxWidth) / 2;
		W.TextX = (W.WinWidth - TW) / 2;
		break;
	}

	W.EditAreaDrawY = (W.WinHeight - 2) / 2;
	W.TextY = (W.WinHeight - TH) / 2;

	W.EditBox.WinLeft = W.EditAreaDrawX + MiscBevelL[2].W;
	W.EditBox.WinTop = MiscBevelT[2].H;
	W.Button.WinWidth = ComboBtnUp.W;

	if(W.bButtons)
	{
		W.EditBox.WinWidth = W.EditBoxWidth - MiscBevelL[2].W - MiscBevelR[2].W - ComboBtnUp.W - SBLeftUp.W - SBRightUp.W;
		W.EditBox.WinHeight = W.WinHeight - MiscBevelT[2].H - MiscBevelB[2].H;
		W.Button.WinLeft = W.WinWidth - ComboBtnUp.W - MiscBevelR[2].W - SBLeftUp.W - SBRightUp.W;
		W.Button.WinTop = W.EditBox.WinTop;

		W.LeftButton.WinLeft = W.WinWidth - MiscBevelR[2].W - SBLeftUp.W - SBRightUp.W;
		W.LeftButton.WinTop = W.EditBox.WinTop;
		W.RightButton.WinLeft = W.WinWidth - MiscBevelR[2].W - SBRightUp.W;
		W.RightButton.WinTop = W.EditBox.WinTop;

		W.LeftButton.WinWidth = SBLeftUp.W;
		W.LeftButton.WinHeight = SBLeftUp.H;
		W.RightButton.WinWidth = SBRightUp.W;
		W.RightButton.WinHeight = SBRightUp.H;
	}
	else
	{
		W.EditBox.WinWidth = W.EditBoxWidth - MiscBevelL[2].W - MiscBevelR[2].W - ComboBtnUp.W;
		W.EditBox.WinHeight = W.WinHeight - MiscBevelT[2].H - MiscBevelB[2].H;
		W.Button.WinLeft = W.WinWidth - ComboBtnUp.W - MiscBevelR[2].W;
		W.Button.WinTop = W.EditBox.WinTop;
	}
	W.Button.WinHeight = W.EditBox.WinHeight;
}

function Combo_Draw(UWindowComboControl W, Canvas C)
{
	W.DrawMiscBevel(C, W.EditAreaDrawX, 0, W.EditBoxWidth, W.WinHeight, Misc, 2);

	if(W.Text != "")
	{
		C.DrawColor = W.TextColor;
		W.ClipText(C, W.TextX, W.TextY, W.Text);
		C.SetDrawColor(255,255,255);
	}
}

function ComboList_DrawBackground(UWindowComboList W, Canvas C)
{
	W.DrawClippedTexture(C, 0, 0, Texture'BlueMenuTL');
	W.DrawStretchedTexture(C, 4, 0, W.WinWidth-8, 4, Texture'BlueMenuT');
	W.DrawClippedTexture(C, W.WinWidth-4, 0, Texture'BlueMenuTR');

	W.DrawClippedTexture(C, 0, W.WinHeight-4, Texture'BlueMenuBL');
	W.DrawStretchedTexture(C, 4, W.WinHeight-4, W.WinWidth-8, 4, Texture'BlueMenuB');
	W.DrawClippedTexture(C, W.WinWidth-4, W.WinHeight-4, Texture'BlueMenuBR');

	W.DrawStretchedTexture(C, 0, 4, 4, W.WinHeight-8, Texture'BlueMenuL');
	W.DrawStretchedTexture(C, W.WinWidth-4, 4, 4, W.WinHeight-8, Texture'BlueMenuR');

	W.DrawStretchedTexture(C, 4, 4, W.WinWidth-8, W.WinHeight-8, Texture'BlueMenuArea');
}

function ComboList_DrawItem(UWindowComboList Combo, Canvas C, float X, float Y, float W, float H, string Text, bool bSelected)
{
	C.SetDrawColor(255,255,255);

	if(bSelected)
	{
		Combo.DrawClippedTexture(C, X, Y, Texture'BlueMenuHL');
		Combo.DrawStretchedTexture(C, X + 4, Y, W - 8, 16, Texture'BlueMenuHM');
		Combo.DrawClippedTexture(C, X + W - 4, Y, Texture'BlueMenuHR');
		C.SetDrawColor(0,0,0);
	}
	else
	{
		C.SetDrawColor(0,0,0);
	}

	Combo.ClipText(C, X + Combo.TextBorder + 2, Y + 3, Text);
}

function Checkbox_SetupSizes(UWindowCheckbox W, Canvas C)
{
	local float TW, TH;

	W.TextSize(C, W.Text, TW, TH);
	W.WinHeight = Max(TH+1, 16);

	switch(W.Align)
	{
	case TA_Left:
		W.ImageX = W.WinWidth - 16;
		W.TextX = 0;
		break;
	case TA_Right:
		W.ImageX = 0;
		W.TextX = W.WinWidth - TW;
		break;
	case TA_Center:
		W.ImageX = (W.WinWidth - 16) / 2;
		W.TextX = (W.WinWidth - TW) / 2;
		break;
	}

	W.ImageY = (W.WinHeight - 16) / 2;
	W.TextY = (W.WinHeight - TH) / 2;

	if(W.bChecked)
	{
		W.UpTexture = Texture'ChkChecked';
		W.DownTexture = Texture'ChkChecked';
		W.OverTexture = Texture'ChkChecked';
		W.DisabledTexture = Texture'ChkCheckedDisabled';
	}
	else
	{
		W.UpTexture = Texture'ChkUnchecked';
		W.DownTexture = Texture'ChkUnchecked';
		W.OverTexture = Texture'ChkUnchecked';
		W.DisabledTexture = Texture'ChkUncheckedDisabled';
	}
}

function Combo_GetButtonBitmaps(UWindowComboButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = ComboBtnUp;
	W.DownRegion = ComboBtnDown;
	W.OverRegion = ComboBtnUp;
	W.DisabledRegion = ComboBtnDisabled;
}

function Combo_SetupLeftButton(UWindowComboLeftButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBLeftUp;
	W.DownRegion = SBLeftDown;
	W.OverRegion = SBLeftUp;
	W.DisabledRegion = SBLeftDisabled;
}

function Combo_SetupRightButton(UWindowComboRightButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBRightUp;
	W.DownRegion = SBRightDown;
	W.OverRegion = SBRightUp;
	W.DisabledRegion = SBRightDisabled;
}

function Editbox_SetupSizes(UWindowEditControl W, Canvas C)
{
	local float TW, TH;
	local int B;

	B = EditBoxBevel;

	C.Font = W.Root.Fonts[W.Font];
	W.TextSize(C, W.Text, TW, TH);

	W.WinHeight = 12 + MiscBevelT[B].H + MiscBevelB[B].H;

	switch(W.Align)
	{
	case TA_Left:
		W.EditAreaDrawX = W.WinWidth - W.EditBoxWidth;
		W.TextX = 0;
		break;
	case TA_Right:
		W.EditAreaDrawX = 0;
		W.TextX = W.WinWidth - TW;
		break;
	case TA_Center:
		W.EditAreaDrawX = (W.WinWidth - W.EditBoxWidth) / 2;
		W.TextX = (W.WinWidth - TW) / 2;
		break;
	}

	W.EditAreaDrawY = (W.WinHeight - 2) / 2;
	W.TextY = (W.WinHeight - TH) / 2;

	W.EditBox.WinLeft = W.EditAreaDrawX + MiscBevelL[B].W;
	W.EditBox.WinTop = MiscBevelT[B].H;
	W.EditBox.WinWidth = W.EditBoxWidth - MiscBevelL[B].W - MiscBevelR[B].W;
	W.EditBox.WinHeight = W.WinHeight - MiscBevelT[B].H - MiscBevelB[B].H;
}

function Editbox_Draw(UWindowEditControl W, Canvas C)
{
	W.DrawMiscBevel(C, W.EditAreaDrawX, 0, W.EditBoxWidth, W.WinHeight, Misc, EditBoxBevel);

	if(W.Text != "")
	{
		C.DrawColor = W.TextColor;
		W.ClipText(C, W.TextX, W.TextY, W.Text);
		C.SetDrawColor(255,255,255);
	}
}

function ControlFrame_SetupSizes(UWindowControlFrame W, Canvas C)
{
	local int B;

	B = EditBoxBevel;

	W.Framed.WinLeft = MiscBevelL[B].W;
	W.Framed.WinTop = MiscBevelT[B].H;
	W.Framed.SetSize(W.WinWidth - MiscBevelL[B].W - MiscBevelR[B].W, W.WinHeight - MiscBevelT[B].H - MiscBevelB[B].H);
}

function ControlFrame_Draw(UWindowControlFrame W, Canvas C)
{
	C.SetDrawColor(255,255,255);

	W.DrawStretchedTexture(C, 0, 0, W.WinWidth, W.WinHeight, Texture'WhiteTexture');
	W.DrawMiscBevel(C, 0, 0, W.WinWidth, W.WinHeight, Misc, EditBoxBevel);
}

function Tab_DrawTab(UWindowTabControlTabArea Tab, Canvas C, bool bActiveTab, bool bLeftmostTab, float X, float Y, float W, float H, string Text, bool bShowText)
{
	local Region R;
	local Texture T;
	local float TW, TH;

	C.SetDrawColor(255,255,255);

	T = Tab.GetLookAndFeelTexture();

	if(bActiveTab)
	{
		R = TabSelectedL;
		Tab.DrawStretchedTextureSegment( C, X, Y, R.W, R.H, R.X, R.Y, R.W, R.H, T );

		R = TabSelectedM;
		Tab.DrawStretchedTextureSegment( C, X+TabSelectedL.W, Y,
										W - TabSelectedL.W
										- TabSelectedR.W,
										R.H, R.X, R.Y, R.W, R.H, T );

		R = TabSelectedR;
		Tab.DrawStretchedTextureSegment( C, X + W - R.W, Y, R.W, R.H, R.X, R.Y, R.W, R.H, T );

		C.Font = Tab.Root.Fonts[Tab.F_Bold];
		C.SetDrawColor(0,0,0);

		if(bShowText)
		{
			Tab.TextSize(C, Text, TW, TH);
			Tab.ClipText(C, X + (W-TW)/2, Y + 3, Text, True);
		}
	}
	else
	{
		R = TabUnselectedL;
		Tab.DrawStretchedTextureSegment( C, X, Y, R.W, R.H, R.X, R.Y, R.W, R.H, T );

		R = TabUnselectedM;
		Tab.DrawStretchedTextureSegment( C, X+TabUnselectedL.W, Y,
										W - TabUnselectedL.W
										- TabUnselectedR.W,
										R.H, R.X, R.Y, R.W, R.H, T );

		R = TabUnselectedR;
		Tab.DrawStretchedTextureSegment( C, X + W - R.W, Y, R.W, R.H, R.X, R.Y, R.W, R.H, T );

		C.Font = Tab.Root.Fonts[Tab.F_Normal];
		C.SetDrawColor(0,0,0);

		if(bShowText)
		{
			Tab.TextSize(C, Text, TW, TH);
			Tab.ClipText(C, X + (W-TW)/2, Y + 4, Text, True);
		}
	}
}

function SB_SetupUpButton(UWindowSBUpButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBUpUp;
	W.DownRegion = SBUpDown;
	W.OverRegion = SBUpUp;
	W.DisabledRegion = SBUpDisabled;
}

function SB_SetupDownButton(UWindowSBDownButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBDownUp;
	W.DownRegion = SBDownDown;
	W.OverRegion = SBDownUp;
	W.DisabledRegion = SBDownDisabled;
}

function SB_SetupLeftButton(UWindowSBLeftButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBLeftUp;
	W.DownRegion = SBLeftDown;
	W.OverRegion = SBLeftUp;
	W.DisabledRegion = SBLeftDisabled;
}

function SB_SetupRightButton(UWindowSBRightButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBRightUp;
	W.DownRegion = SBRightDown;
	W.OverRegion = SBRightUp;
	W.DisabledRegion = SBRightDisabled;
}

function SB_VDraw(UWindowVScrollbar W, Canvas C)
{
	local Region R;
	local Texture T;

	T = W.GetLookAndFeelTexture();

	R = SBBackground;
	W.DrawStretchedTextureSegment( C, 0, 0, W.WinWidth, W.WinHeight, R.X, R.Y, R.W, R.H, T);

	if(!W.bDisabled)
	{
		W.DrawUpBevel( C, 0, W.ThumbStart, Size_ScrollbarWidth,	W.ThumbHeight, T);
	}
}

function SB_HDraw(UWindowHScrollbar W, Canvas C)
{
	local Region R;
	local Texture T;

	T = W.GetLookAndFeelTexture();

	R = SBBackground;
	W.DrawStretchedTextureSegment( C, 0, 0, W.WinWidth, W.WinHeight, R.X, R.Y, R.W, R.H, T);

	if(!W.bDisabled)
	{
		W.DrawUpBevel( C, W.ThumbStart, 0, W.ThumbWidth, Size_ScrollbarWidth, T);
	}
}

function Tab_SetupLeftButton(UWindowTabControlLeftButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();


	W.WinWidth = Size_ScrollbarButtonHeight;
	W.WinHeight = Size_ScrollbarWidth;
	W.WinTop = Size_TabAreaHeight - W.WinHeight;
	W.WinLeft = W.ParentWindow.WinWidth - 2*W.WinWidth;

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBLeftUp;
	W.DownRegion = SBLeftDown;
	W.OverRegion = SBLeftUp;
	W.DisabledRegion = SBLeftDisabled;
}

function Tab_SetupRightButton(UWindowTabControlRightButton W)
{
	local Texture T;

	T = W.GetLookAndFeelTexture();

	W.WinWidth = Size_ScrollbarButtonHeight;
	W.WinHeight = Size_ScrollbarWidth;
	W.WinTop = Size_TabAreaHeight - W.WinHeight;
	W.WinLeft = W.ParentWindow.WinWidth - W.WinWidth;

	W.bUseRegion = True;

	W.UpTexture = T;
	W.DownTexture = T;
	W.OverTexture = T;
	W.DisabledTexture = T;

	W.UpRegion = SBRightUp;
	W.DownRegion = SBRightDown;
	W.OverRegion = SBRightUp;
	W.DisabledRegion = SBRightDisabled;
}

function Tab_SetTabPageSize(UWindowPageControl W, UWindowPageWindow P)
{
	P.WinLeft = 2;
	P.WinTop = W.TabArea.WinHeight-(TabSelectedM.H-TabUnselectedM.H) + 3;
	P.SetSize(W.WinWidth - 4, W.WinHeight-(W.TabArea.WinHeight-(TabSelectedM.H-TabUnselectedM.H)) - 6);
}

function Tab_DrawTabPageArea(UWindowPageControl W, Canvas C, UWindowPageWindow P)
{
	W.DrawUpBevel( C, 0, W.TabArea.WinHeight-(TabSelectedM.H-TabUnselectedM.H), W.WinWidth, W.WinHeight-(W.TabArea.WinHeight-(TabSelectedM.H-TabUnselectedM.H)), W.GetLookAndFeelTexture());
}

function Tab_GetTabSize(UWindowTabControlTabArea Tab, Canvas C, string Text, out float W, out float H)
{
	local float TW, TH;

	C.Font = Tab.Root.Fonts[Tab.F_Bold];

	Tab.TextSize( C, Text, TW, TH );
	W = TW + Size_TabSpacing;
	H = Size_TabAreaHeight;
}

function Menu_DrawMenuBar(UWindowMenuBar W, Canvas C)
{
	W.DrawClippedTexture(C, 0, 0, Texture'BlueBarL');
	W.DrawStretchedTexture( C, 16, 0, W.WinWidth - 32, 16, Texture'BlueBarTile');
	W.DrawClippedTexture(C, W.WinWidth - 16, 0, Texture'BlueBarWin');
}

function Menu_DrawMenuBarItem(UWindowMenuBar B, UWindowMenuBarItem I, float X, float Y, float W, float H, Canvas C)
{
	if(B.Selected == I)
	{
		B.DrawClippedTexture(C, X, 0, Texture'BlueBarInL');
		B.DrawClippedTexture(C, X+W-1, 0, Texture'BlueBarInR');
		B.DrawStretchedTexture(C, X+1, 0, W-2, 16, Texture'BlueBarInM');
	}
	else
	if (B.Over == I)
	{
		B.DrawClippedTexture(C, X, 0, Texture'BlueBarOutL');
		B.DrawClippedTexture(C, X+W-1, 0, Texture'BlueBarOutR');
		B.DrawStretchedTexture(C, X+1, 0, W-2, 16, Texture'BlueBarOutM');
	}

	C.Font = B.Root.Fonts[F_Normal];
	C.SetDrawColor(0,0,0);

	B.ClipText(C, X + B.SPACING / 2, 3, I.Caption, True);
}

function Menu_DrawPulldownMenuBackground(UWindowPulldownMenu W, Canvas C)
{
	W.DrawClippedTexture(C, 0, 0, Texture'BlueMenuTL');
	W.DrawStretchedTexture(C, 4, 0, W.WinWidth-8, 4, Texture'BlueMenuT');
	W.DrawClippedTexture(C, W.WinWidth-4, 0, Texture'BlueMenuTR');

	W.DrawClippedTexture(C, 0, W.WinHeight-4, Texture'BlueMenuBL');
	W.DrawStretchedTexture(C, 4, W.WinHeight-4, W.WinWidth-8, 4, Texture'BlueMenuB');
	W.DrawClippedTexture(C, W.WinWidth-4, W.WinHeight-4, Texture'BlueMenuBR');

	W.DrawStretchedTexture(C, 0, 4, 4, W.WinHeight-8, Texture'BlueMenuL');
	W.DrawStretchedTexture(C, W.WinWidth-4, 4, 4, W.WinHeight-8, Texture'BlueMenuR');
	W.DrawStretchedTexture(C, 4, 4, W.WinWidth-8, W.WinHeight-8, Texture'BlueMenuArea');
}

function Menu_DrawPulldownMenuItem(UWindowPulldownMenu M, UWindowPulldownMenuItem Item, Canvas C, float X, float Y, float W, float H, bool bSelected)
{
	C.SetDrawColor(255,255,255);
	Item.ItemTop = Y + M.WinTop;

	if(Item.Caption == "-")
	{
		M.DrawStretchedTexture(C, X, Y+5, W, 2, Texture'BlueMenuLine');
		return;
	}

	C.Font = M.Root.Fonts[F_Normal];

	if(bSelected)
	{
		M.DrawClippedTexture(C, X, Y, Texture'BlueMenuHL');
		M.DrawStretchedTexture(C, X + 4, Y, W - 8, 16, Texture'BlueMenuHM');
		M.DrawClippedTexture(C, X + W - 4, Y, Texture'BlueMenuHR');
	}

	if(Item.bDisabled)
	{
		// Black Shadow
		C.SetDrawColor(96,96,96);
	}
	else
	{
		C.SetDrawColor(0,0,0);
	}

	// DrawColor will render the tick black white or gray.
	if(Item.bChecked)
		M.DrawClippedTexture(C, X + 1, Y + 3, Texture'MenuTick');

	if(Item.SubMenu != None)
		M.DrawClippedTexture(C, X + W - 9, Y + 3, Texture'MenuSubArrow');

	M.ClipText(C, X + M.TextBorder + 2, Y + 3, Item.Caption, True);
}

function Button_DrawSmallButton(UWindowSmallButton B, Canvas C)
{
	local float Y;

	if(B.bDisabled)
		Y = 34;
	else
	if(B.bMouseDown)
		Y = 17;
	else
		Y = 0;

	B.DrawStretchedTextureSegment(C, 0, 0, 3, 16, 0, Y, 3, 16, Texture'BlueButton');
	B.DrawStretchedTextureSegment(C, B.WinWidth - 3, 0, 3, 16, 45, Y, 3, 16, Texture'BlueButton');
	B.DrawStretchedTextureSegment(C, 3, 0, B.WinWidth-6, 16, 3, Y, 42, 16, Texture'BlueButton');
}

simulated function PlayMenuSound(UWindowWindow W, MenuSound S)
{
	switch(S)
	{
	case MS_MenuPullDown:
//		W.GetPlayerOwner().PlaySound(sound'WindowOpen');
		break;
	case MS_MenuCloseUp:
		break;
	case MS_MenuItem:
//		W.GetPlayerOwner().PlaySound(sound'LittleSelect');
		break;
	case MS_WindowOpen:
//		W.GetPlayerOwner().PlaySound(sound'BigSelect');
		break;
	case MS_WindowClose:
		break;
	case MS_ChangeTab:
//		W.GetPlayerOwner().PlaySound(sound'LittleSelect');
		break;

	}
}

defaultproperties
{
	Active=Texture'BlueActiveFrame'
	Inactive=Texture'BlueInactiveFrame'
	ActiveS=Texture'BlueActiveFrameS'
	InactiveS=Texture'BlueInactiveFrameS'
	Misc=Texture'BlueMisc';


	FrameTL=(X=0,Y=0,W=2,H=16)
	FrameT=(X=32,Y=0,W=1,H=16)
	FrameTR=(X=126,Y=0,W=2,H=16)
	FrameL=(X=0,Y=32,W=2,H=1)
	FrameR=(X=126,Y=32,W=2,H=1)
	FrameBL=(X=0,Y=125,W=2,H=3)
	FrameB=(X=32,Y=125,W=1,H=3)
	FrameBR=(X=126,Y=125,W=2,H=3)

	FrameSBL=(X=0,Y=112,W=2,H=16)
	FrameSB=(X=32,Y=112,W=1,H=16)
	FrameSBR=(X=112,Y=112,W=16,H=16)


	FrameActiveTitleColor=(R=0,G=0,B=0,A=255)
	FrameInactiveTitleColor=(R=255,G=255,B=255,A=255)

	HeadingActiveTitleColor=(R=0,G=0,B=0,A=255)
	HeadingInActiveTitleColor=(R=255,G=255,B=255,A=255)

	FrameTitleX=6
	FrameTitleY=2

	CloseBoxOffsetX=2;
	CloseBoxOffsetY=2;
	CloseBoxUp=(X=4,Y=32,W=11,H=11)
	CloseBoxDown=(X=4,Y=43,W=11,H=11)

	MiscBevelTL(0)=(X=0,Y=17,W=3,H=3)
	MiscBevelT(0)=(X=3,Y=17,W=116,H=3)
	MiscBevelTR(0)=(X=119,Y=17,W=3,H=3)
	MiscBevelL(0)=(X=0,Y=20,W=3,H=10)
	MiscBevelR(0)=(X=119,Y=20,W=3,H=10)
	MiscBevelBL(0)=(X=0,Y=30,W=3,H=3)
	MiscBevelB(0)=(X=3,Y=30,W=116,H=3)
	MiscBevelBR(0)=(X=119,Y=30,W=3,H=3)
	MiscBevelArea(0)=(X=3,Y=20,W=116,H=10)


	MiscBevelTL(1)=(X=0,Y=0,W=3,H=3)
	MiscBevelT(1)=(X=3,Y=0,W=116,H=3)
	MiscBevelTR(1)=(X=119,Y=0,W=3,H=3)
	MiscBevelL(1)=(X=0,Y=3,W=3,H=10)
	MiscBevelR(1)=(X=119,Y=3,W=3,H=10)
	MiscBevelBL(1)=(X=0,Y=14,W=3,H=3)
	MiscBevelB(1)=(X=3,Y=14,W=116,H=3)
	MiscBevelBR(1)=(X=119,Y=14,W=3,H=3)
	MiscBevelArea(1)=(X=3,Y=3,W=116,H=10)


	MiscBevelTL(2)=(X=0,Y=33,W=2,H=2)
	MiscBevelT(2)=(X=2,Y=33,W=1,H=2)
	MiscBevelTR(2)=(X=11,Y=33,W=2,H=2)
	MiscBevelL(2)=(X=0,Y=36,W=2,H=1)
	MiscBevelR(2)=(X=11,Y=36,W=2,H=1)
	MiscBevelBL(2)=(X=0,Y=44,W=2,H=2)
	MiscBevelB(2)=(X=2,Y=44,W=1,H=2)
	MiscBevelBR(2)=(X=11,Y=44,W=2,H=2)
	MiscBevelArea(2)=(X=2,Y=35,W=9,H=9)

	ComboBtnUp=(X=20,Y=60,W=12,H=12)
	ComboBtnDown=(X=32,Y=60,W=12,H=12)
	ComboBtnDisabled=(X=44,Y=60,W=12,H=12)

	EditBoxBevel=2
	EditBoxTextColor=(R=0,G=0,B=0,A=255)

	TabSelectedL=(X=4,Y=80,W=3,H=17)
	TabSelectedM=(X=7,Y=80,W=1,H=17)
	TabSelectedR=(X=55,Y=80,W=2,H=17)

	//TabBackground=(X=7,Y=81,W=48,H=15)
	//TabBackground=(X=10,Y=16,W=1,H=1)
	TabBackground=(X=4,Y=79,W=1,H=1)

	// defaults from Win95 LF
	SBUpUp=(X=20,Y=16,W=12,H=10)
	SBUpDown=(X=32,Y=16,W=12,H=10)
	SBUpDisabled=(X=44,Y=16,W=12,H=10)

	SBDownUp=(X=20,Y=26,W=12,H=10)
	SBDownDown=(X=32,Y=26,W=12,H=10)
	SBDownDisabled=(X=44,Y=26,W=12,H=10)

	SBLeftUp=(X=20,Y=48,W=10,H=12)
	SBLeftDown=(X=30,Y=48,W=10,H=12)
	SBLeftDisabled=(X=40,Y=48,W=10,H=12)

	SBRightUp=(X=20,Y=36,W=10,H=12)
	SBRightDown=(X=30,Y=36,W=10,H=12)
	SBRightDisabled=(X=40,Y=36,W=10,H=12)

	SBBackground=(X=4,Y=79,W=1,H=1)

	BevelUpTL=(X=4,Y=16,W=2,H=2)
	BevelUpT=(X=10,Y=16,W=1,H=2)
	BevelUpTR=(X=18,Y=16,W=2,H=2)

	BevelUpL=(X=4,Y=20,W=2,H=1)
	BevelUpR=(X=18,Y=20,W=2,H=1)

	BevelUpBL=(X=4,Y=30,W=2,H=2)
	BevelUpB=(X=10,Y=30,W=1,H=2)
	BevelUpBR=(X=18,Y=30,W=2,H=2)

	BevelUpArea=(X=8,Y=20,W=1,H=1)

	HLine=(X=5,Y=78,W=1,H=2)

	TabUnselectedL=(X=57,Y=80,W=3,H=15)
	TabUnselectedM=(X=60,Y=80,W=1,H=15)
	TabUnselectedR=(X=109,Y=80,W=2,H=15)

	Size_ScrollbarWidth=12
	Size_ScrollbarButtonHeight=10
	Size_MinScrollbarHeight=6

	Size_TabAreaHeight=15
	Size_TabAreaOverhangHeight=2
	Size_TabSpacing=20
	Size_TabXOffset=1

	Pulldown_ItemHeight=16
	Pulldown_VBorder=4
	Pulldown_HBorder=3
	Pulldown_TextBorder=9

	ColumnHeadingHeight=13
}
class UDebugMapList extends UWindowListBoxItem;



var string MapName;
var string DisplayName;

function int Compare(UWindowList T, UWindowList B)
{
	if(Caps(UDebugMapList(T).MapName) < Caps(UDebugMapList(B).MapName))
		return -1;

	return 1;
}

// Call only on sentinel
function UDebugMapList FindMap(string FindMapName)
{
	local UDebugMapList I;

	for(I = UDebugMapList(Next); I != None; I = UDebugMapList(I.Next))
		if(I.MapName ~= FindMapName)
			return I;

	return None;
}
class UDebugMapListBox extends UWindowListBox;



function DrawItem(Canvas C, UWindowList Item, float X, float Y, float W, float H)
{
	if(UDebugMapList(Item).bSelected)
	{
		C.SetDrawColor(0,0,128);
		DrawStretchedTexture(C, X, Y, W, H-1, Texture'WhiteTexture');
		C.SetDrawColor(255,255,255);
	}
	else
	{
		C.SetDrawColor(0,0,0);
	}

	C.Font = Root.Fonts[F_Normal];
	ClipText(C, X, Y, UDebugMapList(Item).DisplayName);
}



defaultproperties
{
	ListClass=class'UDebugMapList'
	ItemHeight=13
}
class UDebugMapListCW extends UWindowDialogClientWindow;



var UDebugMapListBox MapList;

var UWindowSmallCloseButton CloseButton;
var UDebugSmallLoadMapButton OkButton;
var UWindowComboControl GameCombo;
var UWindowComboControl NetworkCombo;
var GlobalConfig string LastGameType;

function Created()
{
	local int index;

	WinWidth = Min(400, Root.WinWidth - 50);
	WinHeight = Min(210, Root.WinHeight - 50);

	Super.Created();

	MapList = UDebugMapListBox(CreateWindow(class'UDebugMapListBox', 0, 0, 100, 100, Self));
	LoadMapList();

	CloseButton = UWindowSmallCloseButton(CreateWindow(class'UWindowSmallCloseButton', WinWidth-56, WinHeight-24, 48, 16));
	OkButton    = UDebugSmallLoadMapButton(CreateWindow(class'UDebugSmallLoadMapButton', WinWidth-120, WinHeight-24, 58, 16));

	GameCombo   = UWindowComboControl(CreateWindow(class'UWindowComboControl',5,WinHeight-24,WinWidth-130,16));
	GameCombo.SetButtons(True);
	GameCombo.SetText("Game Type:");
	GameCombo.SetFont(F_Normal);
	GameCombo.SetEditable(False);

// << GEARBOX/jmw:add
// GBX:naj - modified 7/3/03 - changed 'gbxPrototype' to 'gbxGameplay
	GameCombo.AddItem("gbxGameplay.WargameGame");
	GameCombo.AddItem("gbxGameplay.gbxTeamGame");
// GEARBOX >>
	GameCombo.AddItem("Engine.GameInfo");
	GameCombo.AddItem("gbxGameplay.WargameDeathMatch");
	GameCombo.AddItem("gbxGameplay.WargameMultiplayer"); //GEARBOX/SDJ:add 03/08/2004: It's time to start the real MP game.
	GameCombo.AddItem("gbxGameplay.WargameSinglePlayer");
	GameCombo.AddItem("gbxGameplay.WargameSkirmish");	// PSV: 4/7/2005 Added skirmish gametype.
	GameCombo.EditBox.WinWidth = GameCombo.WinWidth-60;
	if (LastGameType!="")
	{
		index = GameCombo.List.FindItemIndex(LastGameType);
		GameCombo.SetSelectedIndex(Index);
	}
	else
		GameCombo.SetSelectedIndex(0);

	NetworkCombo   = UWindowComboControl(CreateWindow(class'UWindowComboControl',5,WinHeight-20,WinWidth-130,16));
	NetworkCombo.SetButtons(True);
	NetworkCombo.SetText("Network Game:");
	NetworkCombo.SetFont(F_Normal);
	NetworkCombo.SetEditable(False);
	NetworkCombo.AddItem("Single Player");
	NetworkCombo.AddItem("Listen Server");
	NetworkCombo.SetSelectedIndex(0);


/*	-- GetNextInt not yet working


	// Compile a list of all gametypes.
	NextGame = GetPlayerOwner().GetNextInt("WarfareGameInfo", 0);
	while (NextGame != "")
	{
		TempGames[i] = NextGame;
		i++;
		NextGame = GetPlayerOwner().GetNextInt("WarfareGameInfo", i);
	}

	// Fill the control.
	for (i=0; i<256; i++)
	{
		if (TempGames[i] != "")
		{
			Games[MaxGames] = TempGames[i];
			TempClass = Class<GameInfo>(DynamicLoadObject(Games[MaxGames], class'Class'));
			if( TempClass != None )
			{
				GameCombo.AddItem(TempClass.Default.GameName);
				MaxGames++;
			}
		}
	}
*/


}

function BeforePaint(Canvas C, float X, float Y)
{
	Super.BeforePaint(c,x,y);
}

function Paint(Canvas C, float X, float Y)
{
	local Texture T;

	Super.Paint(C, X, Y);

	T = GetLookAndFeelTexture();
	DrawUpBevel( C, 0, WinHeight-46, WinWidth, 46, T);
}


function Resized()
{
	MapList.WinWidth = WinWidth;
	MapList.WinHeight = WinHeight-46;
	MapList.VertSB.WinLeft = MapList.WinWidth-MapList.VertSB.WinWidth;
	MapList.VertSB.WinHeight=MapList.WinHeight;
	CloseButton.WinLeft = WinWidth-52;
	CloseButton.WinTop = WinHeight-40;
	OkButton.WinLeft = WinWidth-120;
	OkButton.WinTop = WinHeight-40;
	GameCombo.WinTop = WinHeight-40;
	GameCombo.WinWidth = WinWidth-130;
	GameCombo.EditBoxWidth = GameCombo.WinWidth-75;
	NetworkCombo.WinTop = WinHeight-21;
	NetworkCombo.WinWidth = WinWidth-130;
	NetworkCombo.EditBoxWidth = GameCombo.WinWidth-75;

}

function LoadMapList()
{
	local string FirstMap, NextMap, TestMap;
	local UDebugMapList L;

	FirstMap = GetPlayerOwner().GetMapName("", "", 0);
	NextMap = FirstMap;
	while (!(FirstMap ~= TestMap))
	{
		L = UDebugMapList(MapList.Items.Append(class'UDebugMapList'));
		L.MapName = NextMap;
		if(Right(NextMap, 4) ~= ".gbxmap")
			L.DisplayName = Left(NextMap, Len(NextMap) - 4);
		else
			L.DisplayName = NextMap;

		NextMap = GetPlayerOwner().GetMapName("", NextMap, 1);
		TestMap = NextMap;
	}

	MapList.Sort();
}

function Notify(UWindowDialogControl C, byte E)
{
	Super.Notify(C, E);
	switch(E)
	{
	case DE_Change:
		switch(C)
		{
		case GameCombo:
			LastGameType = GameCombo.GetValue();
			SaveConfig();

			break;
		}
		break;
	}
}

function WindowEvent(WinMessage Msg, Canvas C, float X, float Y, int Key)
{
	if (Msg==WM_KeyDown)
	{
		if (Key==236)
			MapList.VertSB.Scroll(-1);
		else if (Key==237)
			MapList.VertSB.Scroll(+1);

		return;
	}

	Super.WindowEvent(MSg,C,X,Y,Key);
}

defaultproperties
{
}
class UDebugMapListWindow extends UWindowFramedWindow;




function Created()
{
	bSizable = True;
	MinWinWidth = 200;
	Super.Created();
}

defaultproperties
{
	WindowTitle="Select a Map...";
	ClientClass=class'UDebugMapListCW'
}
class UDebugMenuBar extends UWindowMenuBar;



var UWindowPulldownMenu Game, RModes, Rend, KDraw, Stats, Show, Player, Options;
var UWindowMenuBarItem GameItem, RModesItem, RendItem, KDrawItem, StatsItem, ShowItem, PlayerItem, OptionsItem;
var bool bShowMenu;

function Created()
{
	Super.Created();

	GameItem = AddItem("&Game");
	Game = GameItem.CreateMenu(class 'UWindowPulldownMenu');
	Game.MyMenuBar = self;
	Game.AddMenuItem("&Load New Map",none);
	Game.AddMenuItem("-",none);
	Game.AddMenuItem("&Connect to..",none);
	Game.AddMenuItem("-",none);
	Game.AddMenuItem("ScreenShot",none);
	Game.AddMenuItem("Flush",none);
	Game.AddMenuItem("Test GUI",none);
	Game.AddMenuItem("-",none);
	Game.AddMenuItem("E&xit",none);

	RModesItem = AddItem("&Render Modes");
	RModes = RModesItem.CreateMenu(class 'UWindowPulldownMenu');
	RModes.MyMenuBar = self;
	RModes.AddMenuItem("&Wireframe",none);
	RModes.AddMenuItem("&Zones",none);
	RModes.AddMenuItem("&Flat Shaded BSP",none);
	RModes.AddMenuItem("&BSP Splits",none);
	RModes.AddMenuItem("&Regular",none);
	RModes.AddMenuItem("&Unlit",none);
	RModes.AddMenuItem("&Lighting Only",none);
	RModes.AddMenuItem("&Depth Complexity",none);
	RModes.AddMenuItem("-",None);
	RModes.AddMenuItem("&Top Down",None);
	RModes.AddMenuItem("&Front",None);
	RModes.AddMenuItem("&Side",None);

	RendItem = AddItem("Render &Commands");
	Rend = RendItem.CreateMenu(class 'UWindowPulldownMenu');
	Rend.MyMenuBar = self;
	Rend.AddMenuItem("&Blend",none);
	Rend.AddMenuItem("&Bone",none);
	Rend.AddMenuItem("&Skin",none);
	Rend.AddMenuItem("&Collision",none);

	StatsItem = AddItem("&Stats");
	Stats = StatsItem.CreateMenu(class 'UWindowPulldownMenu');
	Stats.MyMenuBar = self;
	Stats.AddMenuItem("&All",None);
	Stats.AddMenuItem("&None",None);
	Stats.AddMenuItem("-",None);
	Stats.AddMenuItem("&Render",None);
	Stats.AddMenuItem("A&udio",None);
	Stats.AddMenuItem("&Game",None);
	Stats.AddMenuItem("&Hardware",None);
	Stats.AddMenuItem("Ne&t",None);
	Stats.AddMenuItem("An&im",None);
	Stats.AddMenuItem("&Mem/Cache",None);

	ShowItem = AddItem("Sho&w Commands");
	Show = ShowItem.CreateMenu(class 'UWindowPulldownMenu');
	Show.MyMenuBar = self;
	Show.AddMenuItem("Show &Actors",None);
	Show.AddMenuItem("Show Static &Meshes",None);
	Show.AddMenuItem("Show &Terrain",None);
	Show.AddMenuItem("Show &Fog",None);
	Show.AddMenuItem("Show &Sky",None);
	Show.AddMenuItem("Show &Coronas",None);
	Show.AddMenuItem("Show &Particles",None);
	Show.AddMenuItem("Show Co&llision",None);
	Show.AddMenuItem("Show &kDOP Collision",None);

	OptionsItem = AddItem("&Options");
	Options = OptionsItem.CreateMenu(class 'UWindowPulldownMenu');
	Options.MyMenuBar = self;
	Options.AddMenuItem("&Video",None);
//	Options.AddMenuItem("&Audio",None);
//	Options.AddMenuItem("&Keys",None);

	KDrawItem = AddItem("&Karma Physics");
	KDraw = KDrawItem.CreateMenu(class 'UWindowPulldownMenu');
	KDraw.MyMenuBar = self;
	KDraw.AddMenuItem("&Collision",none);
	KDraw.AddMenuItem("C&ontacts",none);
	KDraw.AddMenuItem("&Triangles",none);
	KDraw.AddMenuItem("Co&m",none);
	KDraw.AddMenuItem("-",none);
	KDraw.AddMenuItem("KStop",none);
	KDraw.AddMenuItem("KStep",none);

	bShowMenu = true;
	Spacing = 12 * Root.GUIScale;

}

function SetHelp(string NewHelpText)
{
}

function ShowHelpItem(UWindowMenuBarItem I)
{
}

function BeforePaint(Canvas C, float X, float Y)
{
	Super.BeforePaint(C, X, Y);
}

function DrawItem(Canvas C, UWindowList Item, float X, float Y, float W, float H)
{
	C.SetDrawColor(255,255,255);
	if(UWindowMenuBarItem(Item).bHelp) W = W - 16;

	UWindowMenuBarItem(Item).ItemLeft = X;
	UWindowMenuBarItem(Item).ItemWidth = W;
	LookAndFeel.Menu_DrawMenuBarItem(Self, UWindowMenuBarItem(Item), X, Y, W, H, C);
}

function DrawMenuBar(Canvas C)
{
	local string VersionText;
	VersionText = "[Debug Menu] Version "@GetLevel().EngineVersion;
	LookAndFeel.Menu_DrawMenuBar(Self, C);

	C.Font = Root.Fonts[F_Normal];

	C.SetDrawColor(0,0,0);

//  Version info is too big to fix on screen with large fonts - jlb
//	TextSize(C, VersionText, W, H);
//	ClipText(C, WinWidth - W - 20, 3, VersionText);
}

function LMouseDown(float X, float Y)
{
	if(X > WinWidth - 13) GetPlayerOwner().ConsoleCommand("togglefullscreen");
	Super.LMouseDown(X, Y);
}
function NotifyQuitUnreal()
{
	local UWindowMenuBarItem I;

	for(I = UWindowMenuBarItem(Items.Next); I != None; I = UWindowMenuBarItem(I.Next))
		if(I.Menu != None)
			I.Menu.NotifyQuitUnreal();
}

function NotifyBeforeLevelChange()
{
	local UWindowMenuBarItem I;

	for(I = UWindowMenuBarItem(Items.Next); I != None; I = UWindowMenuBarItem(I.Next))
		if(I.Menu != None)
			I.Menu.NotifyBeforeLevelChange();
}

function NotifyAfterLevelChange()
{
	local UWindowMenuBarItem I;

	for(I = UWindowMenuBarItem(Items.Next); I != None; I = UWindowMenuBarItem(I.Next))
		if(I.Menu != None)
			I.Menu.NotifyAfterLevelChange();
}

function MenuCmd(int Menu, int Item)
{
	Super.MenuCmd(Menu, Item);
}

function WindowEvent(WinMessage Msg, Canvas C, float X, float Y, int Key)
{
	switch(Msg)
	{
		case WM_KeyDown:


			if (Key==27) // GRR
			{
				if (Selected == None)
				{
					Root.GotoState('');
				}

				return;
			}
			break;
	}
	Super.WindowEvent(Msg, C, X, Y, Key);

}

function Paint(Canvas C, float MouseX, float MouseY)
{
	local float X, W, H;
	local UWindowMenuBarItem I;

	DrawMenuBar(C);

	for( I = UWindowMenuBarItem(Items.Next);I != None; I = UWindowMenuBarItem(I.Next) )
	{
		C.Font = Root.Fonts[F_Normal];
		TextSize( C, RemoveAmpersand(I.Caption), W, H );

		if(I.bHelp)
		{
			DrawItem(C, I, (WinWidth - (W + Spacing)), 1, W + Spacing, 14);
		}
		else
		{
			DrawItem(C, I, X, 1, W + Spacing, 14);
			X = X + W + Spacing;
		}
	}
}

function MenuItemSelected(UWindowBase Sender, UWindowBase Item)
{
	local UWindowPulldownMenu Menu;
	local UWindowPulldownMenuItem I;

	Menu = UWindowPulldownMenu(Sender);
	I = UWindowPulldownMenuItem(Item);

	if (Menu!=None)
	{
		switch (Menu)
		{
			case Game:
				switch (I.Tag)
				{
					case 1 :
						// Open the Map Menu
						Root.ShowModal(Root.CreateWindow(class'UDebugMapListWindow', (Root.WinWidth/2)-200, (Root.WinHeight/2)-107, 400, 214, self));
						return;
						break;

					case 3 :
						// Open the Map Menu
						Root.ShowModal(Root.CreateWindow(class'UDebugOpenWindow', (Root.WinWidth/2)-150,(Root.WinHeight/2)-45, 300,90, self));
						return;
						break;

					case 5 : Root.ConsoleCommand("Shot"); break;
					case 6 : Root.ConsoleCommand("Flush"); break;
					case 7 :
						GetPlayerOwner().ClientOpenMenu("GUI.JoeTest");
						break;
					case 9 : Root.ConsoleCommand("Quit"); break;
				}
				break;
			case RModes:
				if (I.Tag < 9)
					Root.ConsoleCommand("RMode "$I.Tag);
				else if (I.Tag >9)
					Root.ConsoleCommand("RMode "$I.Tag+3);

				break;

			case Rend:
				switch (I.Tag)
				{
					case 1 : Root.ConsoleCommand("rend blend"); break;
					case 2 : Root.ConsoleCommand("rend bone"); break;
					case 3 : Root.ConsoleCommand("rend skin"); break;
					case 4 : Root.ConsoleCommand("rend collision"); break;
				}
				break;

			case Stats:
				switch (I.Tag)
				{
					case 1 : Root.ConsoleCommand("stat All");break;
					case 2 : Root.ConsoleCommand("stat NONE");break;
					case 4 : Root.ConsoleCommand("stat RENDER");break;
					case 5 : Root.ConsoleCommand("stat GAME");break;
					case 6 : Root.ConsoleCommand("stat HARDWARE");break;
					case 7 : Root.ConsoleCommand("stat NET");break;
					case 8 : Root.ConsoleCommand("stat ANIM");break;
					case 9 : Root.ConsoleCommand("stat MEM");break;
				}
				break;

			case Show:
				switch (I.Tag)
				{
					case 1 : Root.ConsoleCommand("show Actors"); break;
					case 2 : Root.ConsoleCommand("show StaticMeshes"); break;
					case 3 : Root.ConsoleCommand("show Terrain"); break;
					case 4 : Root.ConsoleCommand("show Fog"); break;
					case 5 : Root.ConsoleCommand("show Sky"); break;
					case 6 : Root.ConsoleCommand("show Coronas"); break;
					case 7 : Root.ConsoleCommand("show Particles"); break;
					case 8 : Root.ConsoleCommand("show Collision"); break;
					case 9 : Root.ConsoleCommand("show kDOPCollision"); break;
				}
				break;

			case Options:
				switch (I.tag)
				{
					case 1 : // Video Menu

						Root.ShowModal(Root.CreateWindow(class'UDebugVideoWindow', Options.WinLeft, 20, 220, 100, self));
						return;
						break;

					case 2 : break; // Audio Menu
					case 3 : break; // Input Menu
				}
				break;

			case KDraw:
				switch (I.tag)
				{
					case 1 : Root.ConsoleCommand("kdraw Collision"); break;
					case 2 : Root.ConsoleCommand("kdraw Contacts"); break;
					case 3 : Root.ConsoleCommand("kdraw Triangles"); break;
					case 4 : Root.ConsoleCommand("kdraw Com"); break;
					case 6 : Root.ConsoleCommand("kdraw KStop"); break;
					case 7 : Root.ConsoleCommand("kdraw KStep"); break;
				}
				break;
		}
	}
	Root.GotoState('');

}

defaultproperties
{
}

class UDebugOpenCW extends UWindowDialogClientWindow;



var UWindowComboControl OpenCombo;
var localized string	OpenText;
var localized string	OpenHelp;

var config string		OpenHistory[10];

function Created()
{
	local float EditWidth;
	local int i;

	Super.Created();

	EditWidth = WinWidth - 40;
	OpenCombo = UWindowComboControl(CreateControl(class'UWindowComboControl', 20, 20, EditWidth, 1));
	OpenCombo.SetText(OpenText);
	OpenCombo.SetHelpText(OpenHelp);
	OpenCombo.SetFont(F_Normal);
	OpenCombo.SetEditable(True);
	OpenCombo.EditBoxWidth = OpenCombo.WinWidth - 40;

	for (i=0; i<10; i++)
		if (OpenHistory[i] != "")
			OpenCombo.AddItem(OpenHistory[i]);
}
function Notify(UWindowDialogControl C, byte E)
{
	Super.Notify(C, E);

	if((C == OpenCombo && E == DE_EnterPressed) ||
	   (C == UDebugOpenWindow(ParentWindow).OKButton && E == DE_Click))
		OpenURL();
}

function OpenURL()
{
	local int i;
	local bool HistoryItem;
	local UWindowComboListItem Item;
	local string URL;

	URL = OpenCombo.GetValue();
	if(URL == "")
	{
		OpenCombo.BringToFront();
		return;
	}

	for (i=0; i<10; i++)
	{
		if (OpenHistory[i] ~= URL)
			HistoryItem = True;
	}
	if (!HistoryItem)
	{
		OpenCombo.InsertItem(URL);
		while(OpenCombo.List.Items.Count() > 10)
			OpenCombo.List.Items.Last.Remove();

		Item = UWindowComboListItem(OpenCombo.List.Items.Next);
		for (i=0; i<10; i++)
		{
			if(Item != None)
			{
				OpenHistory[i] = Item.Value;
				Item = UWindowComboListItem(Item.Next);
			}
			else
				OpenHistory[i] = "";
		}
	}

	SaveConfig();
	OpenCombo.ClearValue();
	GetParent(class'UWindowFramedWindow').Close();
	Root.GotoState('');
	Root.ConsoleCommand("open "$URL);

}

defaultproperties
{
	OpenText="Open:"
	OpenHelp="Enter a standard URL, or select one from the URL history.  Press Enter to activate."
}
class UDebugOpenWindow extends UWindowFramedWindow;



var UWindowSmallCloseButton CloseButton;
var UWindowSmallButton OKButton;
var localized string OKText;

function Created()
{
	Super.Created();

	OKButton = UWindowSmallButton(CreateWindow(class'UWindowSmallButton', WinWidth-108, WinHeight-24, 48, 16));
	CloseButton = UWindowSmallCloseButton(CreateWindow(class'UWindowSmallCloseButton', WinWidth-56, WinHeight-24, 48, 16));
	OKButton.Register(UDebugOpenCW(ClientArea));
	OKButton.SetText(OKText);
}

function Resized()
{
	Super.Resized();
	ClientArea.SetSize(ClientArea.WinWidth, ClientArea.WinHeight-24);
}

function BeforePaint(Canvas C, float X, float Y)
{
	Super.BeforePaint(C, X, Y);

	OKButton.WinLeft = ClientArea.WinLeft+ClientArea.WinWidth-104;
	OKButton.WinTop = ClientArea.WinTop+ClientArea.WinHeight+4;
	CloseButton.WinLeft = ClientArea.WinLeft+ClientArea.WinWidth-52;
	CloseButton.WinTop = ClientArea.WinTop+ClientArea.WinHeight+4;
}

function Paint(Canvas C, float X, float Y)
{
	local Texture T;

	T = GetLookAndFeelTexture();
	DrawUpBevel( C, ClientArea.WinLeft, ClientArea.WinTop + ClientArea.WinHeight, ClientArea.WinWidth, 24, T);

	Super.Paint(C, X, Y);
}

defaultproperties
{
	WindowTitle="Open Location"
	ClientClass=class'UDebugOpenCW'
	OKText="OK"
}
// ====================================================================
//  Class:  UDebugMenu.UDebugRootWindow
//  Parent: UWindow.UWindowRootWindow
//
//  <Enter a description here>
// ====================================================================

class UDebugRootWindow extends UWindowRootWindow;



var class<UWindowMenuBar> MenuBarClass;
var UDebugMenuBar		 MenuBar;


function Created()
{
	Super.Created();

	MenuBar = UDebugMenuBar(CreateWindow(class'UDebugMenuBar', 50, 0, 500, 16));
	MenuBar.HideWindow();

	Resized();
}


function Resized()
{
	Super.Resized();

	MenuBar.WinLeft = 0;;
	MenuBar.WinTop = 0;
	MenuBar.WinWidth = WinWidth;;
	MenuBar.WinHeight = 16;
}

function DoQuitGame()
{
	MenuBar.SaveConfig();
	if ( Root.GetLevel().Game != None )
	{
		Root.GetLevel().Game.SaveConfig();
		Root.GetLevel().Game.GameReplicationInfo.SaveConfig();
	}
	Super.DoQuitGame();
}

function bool KeyEvent( out EInputKey Key, out EInputAction Action, FLOAT Delta )
{
	if ( (Action == IST_Press) && (Key == IK_F2) )
	{
		bAllowConsole = false;
		GotoState('UWindows');
		return true;
	}

	return Super.KeyEvent(Key,Action,Delta);
}

state UWindows
{
	function BeginState()
	{
		if (!bAllowConsole)
			MenuBar.ShowWindow();

		Super.BeginState();

	}

	function EndState()
	{
		MenuBar.HideWindow();
		Super.EndState();
	}

}


defaultproperties
{
	LookAndFeelClass="UDebugMenu.UDebugBlueLookAndFeel"
}
// ====================================================================
//  Class:  UDebugMenu.UDebugSmallLoadMapButton
//  Parent: UWindow.UWindowSmallOKButton
//
//  <Enter a description here>
// ====================================================================

class UDebugSmallLoadMapButton extends UWindowSmallOKButton;



function Created()
{
	Super.Created();
	SetText("Load Map");
}

function Click(float X, float Y)
{
	local string NetworkName, URL;
	local UDebugMapListCW CW;
	local UDebugMapListWindow LW;

	LW = UDebugMapListWindow(GetParent(class'UDebugMapListWindow'));
	CW = UDEbugMapListCW(LW.ClientArea);

	if (CW != None)
	{
		if (CW.MapList.SelectedItem == None)
		{
			return;
		}

		URL = ""$UDebugMapList(CW.MapList.SelectedItem).MapName$"?Game="$CW.GameCombo.GetValue();
		NetworkName = CW.NetworkCombo.GetValue();
		Root.GotoState('');
		if (NetworkName=="Listen Server")
			Root.Master.Travel(""$URL$"?Listen");
		else
			Root.Master.Travel(URL);
	}

	Super.Click(x,y);
}


defaultproperties
{

}
class UDebugVideoClient extends UWindowDialogClientWindow;



// Resolution
var UWindowComboControl ResolutionCombo;
var localized string ResolutionText;
var localized string ResolutionHelp;

// Brightness
var UWindowHSliderControl BrightnessSlider;
var localized string BrightnessText;
var localized string BrightnessHelp;

// Confirm message box

var UWindowMessageBox ConfirmSettings, ConfirmDriver, ConfirmWorldTextureDetail, ConfirmSkinTextureDetail;
var localized string ConfirmSettingsTitle;
var localized string ConfirmSettingsText;
var localized string ConfirmSettingsCancelTitle;
var localized string ConfirmSettingsCancelText;
var localized string ConfirmTextureDetailTitle;
var localized string ConfirmTextureDetailText;
var localized string ConfirmDriverTitle;
var localized string ConfirmDriverText;


var string OldSettings;
var bool bInitialized;
var float ControlOffset;

function Created()
{
	local int ControlWidth, ControlLeft, ControlRight;
	local int CenterWidth, CenterPos;

	Super.Created();

	ControlWidth = WinWidth/2.5;
	ControlLeft = (WinWidth/2 - ControlWidth)/2;
	ControlRight = WinWidth/2 + ControlLeft;

	CenterWidth = (WinWidth/4)*3;
	CenterPos = (WinWidth - CenterWidth)/2;


	// Resolution
	ResolutionCombo = UWindowComboControl(CreateControl(class'UWindowComboControl', CenterPos, ControlOffset, CenterWidth, 1));
	ResolutionCombo.SetText(ResolutionText);
	ResolutionCombo.SetHelpText(ResolutionHelp);
	ResolutionCombo.SetFont(F_Normal);
	ResolutionCombo.SetEditable(False);
	ControlOffset += 25;

	// Brightness
	BrightnessSlider = UWindowHSliderControl(CreateControl(class'UWindowHSliderControl', CenterPos, ControlOffset, CenterWidth, 1));
	BrightnessSlider.bNoSlidingNotify = True;
	BrightnessSlider.SetRange(2, 10, 1);
	BrightnessSlider.SetText(BrightnessText);
	BrightnessSlider.SetHelpText(BrightnessHelp);
	BrightnessSlider.SetFont(F_Normal);

	LoadAvailableSettings();
}

function AfterCreate()
{
	Super.AfterCreate();

	DesiredWidth = 220;
	DesiredHeight = ControlOffset;
}

function LoadAvailableSettings()
{
	local float Brightness;

	bInitialized = False;

	// Load available video drivers and current video driver here.

	ResolutionCombo.Clear();

/* - GetRes isn't working
	ParseString = GetPlayerOwner().ConsoleCommand("GetRes");
	P = InStr(ParseString, " ");
	while (P != -1)
	{
		ResolutionCombo.AddItem(Left(ParseString, P));
		ParseString = Mid(ParseString, P+1);
		P = InStr(ParseString, " ");
	}
	ResolutionCombo.AddItem(ParseString);
	ResolutionCombo.SetValue(GetPlayerOwner().ConsoleCommand("GetCurrentRes"));
*/

	ResolutionCombo.AddItem("640x480");
	ResolutionCombo.AddItem("800x600");
	ResolutionCombo.AddItem("1024x768");
	ResolutionCombo.AddItem("1280x1024");
	ResolutionCombo.AddItem("1600x1200");
	ResolutionCombo.SetValue(GetPlayerOwner().ConsoleCommand("GetCurrentRes"));


	Brightness = int(float(GetPlayerOwner().ConsoleCommand("get ini:Engine.Engine.ViewportManager Brightness")) * 10);
	BrightnessSlider.SetValue(Brightness);

	bInitialized = True;
}

function ResolutionChanged(float W, float H)
{
	Super.ResolutionChanged(H, H);
	if(GetPlayerOwner().ConsoleCommand("GetCurrentRes") != ResolutionCombo.GetValue())
		LoadAvailableSettings();
}

function BeforePaint(Canvas C, float X, float Y)
{
	local int ControlWidth, ControlLeft, ControlRight;
	local int CenterWidth, CenterPos;

	Super.BeforePaint(C, X, Y);

	ControlWidth = WinWidth/2.5;
	ControlLeft = (WinWidth/2 - ControlWidth)/2;
	ControlRight = WinWidth/2 + ControlLeft;

	CenterWidth = (WinWidth/4)*3;
	CenterPos = (WinWidth - CenterWidth)/2;

	ResolutionCombo.SetSize(CenterWidth, 1);
	ResolutionCombo.WinLeft = CenterPos;
	ResolutionCombo.EditBoxWidth = 100;

	BrightnessSlider.SetSize(CenterWidth, 1);
	BrightnessSlider.SliderWidth = 100;
	BrightnessSlider.WinLeft = CenterPos;
}

function Notify(UWindowDialogControl C, byte E)
{
	Super.Notify(C, E);

	switch(E)
	{
	case DE_Change:
		switch(C)
		{
		case ResolutionCombo:
			SettingsChanged();
			break;
		case BrightnessSlider:
			BrightnessChanged();
			break;
		}
		break;
	}
}

function SettingsChanged()
{
	local string NewSettings;

	if(bInitialized)
	{
		OldSettings = GetPlayerOwner().ConsoleCommand("GetCurrentRes");

		NewSettings = ResolutionCombo.GetValue();

		if(NewSettings != OldSettings)
		{
			GetPlayerOwner().ConsoleCommand("SetRes "$NewSettings);
			LoadAvailableSettings();
			ConfirmSettings = MessageBox(ConfirmSettingsTitle, ConfirmSettingsText, MB_YesNo, MR_No, MR_None, 10);
		}
	}
}

function MessageBoxDone(UWindowMessageBox W, MessageBoxResult Result)
{
	if(W == ConfirmSettings)
	{
		ConfirmSettings = None;
		if(Result != MR_Yes)
		{
			GetPlayerOwner().ConsoleCommand("SetRes "$OldSettings);
			LoadAvailableSettings();
			MessageBox(ConfirmSettingsCancelTitle, ConfirmSettingsCancelText, MB_OK, MR_OK, MR_OK);
		}
	}
}

function BrightnessChanged()
{
	if(bInitialized)
	{
		GetPlayerOwner().ConsoleCommand("set ini:Engine.Engine.ViewportManager Brightness "$(BrightnessSlider.Value / 10));
		GetPlayerOwner().ConsoleCommand("Brightness "$(BrightnessSlider.Value / 10));
		GetPlayerOwner().ConsoleCommand("FLUSH");
	}
}
defaultproperties
{
	BrightnessText="Brightness"
	BrightnessHelp="Adjust display brightness."
	ConfirmDriverTitle="Change Video Driver"
	ConfirmDriverText="This option will restart Unreal now, and enable you to change your video driver.  Do you want to do this?"
	ResolutionText="Resolution"
	ResolutionHelp="Select a new screen resolution."
	ControlOffset=20;
	ConfirmSettingsTitle="Confirm Video Settings Change"
	ConfirmSettingsText="Are you sure you wish to keep these new video settings?"
	ConfirmSettingsCancelTitle="Video Settings Change"
	ConfirmSettingsCancelText="Your previous video settings have been restored."
	ConfirmTextureDetailTitle="Confirm Texture Detail"
	ConfirmTextureDetailText="Increasing texture detail above its default value may degrade performance on some machines.\\n\\nAre you sure you want to make this change?"
}

// ====================================================================
//  Class:  UDebugMenu.UDebugVideoWindow
//  Parent: UWindow.UWindowFramedWindow
//
//  <Enter a description here>
// ====================================================================

class UDebugVideoWindow extends UWindowFramedWindow;




defaultproperties
{
	WindowTitle="Video Settings";
	ClientClass=class'UDebugVideoClient'
}
